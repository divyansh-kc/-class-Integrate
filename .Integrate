'''class Integrate(object):
# Here f is a function to be Integrated, b is final and a is initial point of limit of Definate Integral.

    def trapezoid(self, a, b, f, n=100):
        h = float(b - a) / n
        s = 0.0
        s += f(a)/2.0
        for i in range(1, n):
            s += f(a + i*h)
        s += f(b)/2.0
        return s * h
    
        
    def simpson(self, a, b, f, n=100):
        if n & 1:
            print ("Error: n is zero which is not allowed")
            return 0.0
    
        h = float(b - a) / n
        integral = 0.0

        x = float(a)
        for i in range(0, n / 2):
            integral += f(x) + (2.0 * f(x + h))
            x += 2 * h
    
        integral = (2.0 * integral) - f(a) + f(b)
        integral = h * integral / 3.0
        return integral
        
        
    def solve(self,method, a, b, f, n=100):
        if method=='trapezoid':
            return self.trapezoid(a, b, f, n)
        elif method== 'simpson':
            return self.simpson(a, b, f, n)'''
            
'''the graph plotting functions are given below'''            

import numpy as np
import matplotlib.pyplot as plt

def simplot(f,a,b,n):
    x=np.arange(a,b,0.1)
    y=f(x)
    plt.plot(x,y,'r-')
    z=np.linspace(a,b,n)#divide interval in n parts
    g,h=[],[]
    i=0
    while i<len(z)-1:
        g.append((z[i]+z[i+1])/2.0)
        i=i+1
        
    for i in g:
        h.append(f(i))#corresponding y cordinates
    w=z[1]-z[0]#width
    
    v=z
    v=np.delete(v,len(v)-1)#delete the last cordinate
    plt.bar(v,h,width=w)
    for i,j in zip(g,h):
        plt.plot([i,i],[j,0],'r--')
    plt.title('INTEGRATION BY SIMPSONS METHOD')
    plt.xlabel('X-AXIS')
    plt.ylabel('Y-AXIS')
        
                
def traplot(f,a,b,n):
     x=np.arange(a,b,0.1)
     y=f(x)
     plt.plot(x,y,'r-')
     z=np.linspace(a,b,n)
     y=[0]*n
     plt.plot(z,y,'bo-')
     plt.plot(z,f(z),'bo')
     c=f(z)
     for i,j in zip(z,c):
         plt.plot([i,i],[j,0],'bo-')
     plt.plot(z,f(z),'bo-')
     plt.title('INTEGRATION BY TRAPEZOIDAL METHOD')
     plt.xlabel('X-AXIS')
     plt.ylabel('Y-AXIS')
     
                   
    
    
